<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DownloadCancelled" xml:space="preserve">
    <value>Download cancelled.</value>
    <comment>Shown when the download operation has been cancelled (without throwing an exception).</comment>
  </data>
  <data name="DownloadProgressPrefix" xml:space="preserve">
    <value>Downloading: </value>
    <comment>Prefix for download progress display.</comment>
  </data>
  <data name="DownloadStartPrefix" xml:space="preserve">
    <value>Downloading resource from: </value>
    <comment>Prefix for download URL display.</comment>
  </data>
  <data name="DownloadSuccess" xml:space="preserve">
    <value>Download finished.</value>
    <comment>Shown when download has successfully finished.</comment>
  </data>
  <data name="ErrorDownloadFolderPath" xml:space="preserve">
    <value>the provided save path is a folder.</value>
    <comment>Shown when the download output path is an existing folder.</comment>
  </data>
  <data name="ErrorDownloadPrefix" xml:space="preserve">
    <value>Cannot download file: </value>
    <comment>Prefix for remote resource download errors.</comment>
  </data>
  <data name="ErrorDownloadUrlFormat" xml:space="preserve">
    <value>the provided URL is incorrect.</value>
    <comment>Shown when the URL cannot be parsed by the downloader.</comment>
  </data>
  <data name="ErrorDownloadUrlNull" xml:space="preserve">
    <value>no URL is given.</value>
    <comment>Shown when a null URL is given for the download.</comment>
  </data>
  <data name="ErrorGetInvalidCommand" xml:space="preserve">
    <value>no option for GET is found with provided command.</value>
    <comment>Shown when no match for GET command is found.</comment>
  </data>
  <data name="ErrorGetMonitorIndexAbsent" xml:space="preserve">
    <value>no monitor index was provided.</value>
    <comment>Shown when the required monitor index was not provided.</comment>
  </data>
  <data name="ErrorGetOutputFileIncorrect" xml:space="preserve">
    <value>the provided output file path is incorrect.</value>
    <comment>Shown when outputting the result of a GET operation into an incorrect file path.</comment>
  </data>
  <data name="ErrorGetOutputFilePrefix" xml:space="preserve">
    <value>Cannot output results: </value>
    <comment>Prefix for a GET operation with incorrect output path.</comment>
  </data>
  <data name="ErrorHtmlColorCodeFormat" xml:space="preserve">
    <value>the provided HTML color code is not formatted correctly (e.g. #FFFFFF).</value>
    <comment>Shown when the program cannot parse a provided HTML color code.</comment>
  </data>
  <data name="ErrorSetBackgroundColorPrefix" xml:space="preserve">
    <value>Cannot set background color: </value>
    <comment>Prefix for background color setting errors.</comment>
  </data>
  <data name="ErrorSetMonitorMalformed" xml:space="preserve">
    <value>the provided monitor index/ID is incorrect.</value>
    <comment>Shown when accessing a monitor by its index or ID.</comment>
  </data>
  <data name="FaultyCommandErrorPrefix" xml:space="preserve">
    <value>Invalid command: </value>
    <comment>Used in Program.FaultyCommand(errors) to begin an obtrusive command line error.</comment>
  </data>
  <data name="FaultyCommandWarningPrefix" xml:space="preserve">
    <value>Warning: </value>
    <comment>Used in Program.FaultyCommand(errors) to begin a nonobtrusive command line error.</comment>
  </data>
</root>